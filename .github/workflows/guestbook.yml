name: ‚ú® Guestbook

on:
  issues:
    types: [opened, edited, labeled, closed, reopened]
  workflow_dispatch:
  discussion:
    types: [created, edited, deleted]
  discussion_comment:
    types: [created, edited, deleted]

permissions:
  contents: write
  issues: write
  discussions: read

jobs:
  update-guestbook:
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: üîÑ Update Guestbook
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs').promises;
            
            // Helper function to format date
            function formatDate(date) {
              return new Date(date).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
              });
            }
            
            // Get all guestbook entries
            async function getGuestbookEntries() {
              const entries = [];
              
              // Get issues with guestbook label
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'all',
                labels: 'guestbook',
                per_page: 100,
                sort: 'created',
                direction: 'desc'
              });
              
              // Process each issue
              for (const issue of issues.data) {
                const message = issue.body
                  .replace(/### (.*?)\r?\n/g, '') // Remove headers
                  .replace(/\r?\n/g, '<br>')         // Replace newlines with spaces
                  .trim();
                  
                if (message) {
                  entries.push({
                    author: issue.user.login,
                    avatar: issue.user.avatar_url,
                    message: message,
                    date: formatDate(issue.created_at),
                    url: issue.html_url
                  });
                }
              }
              
              return entries;
            }
            
            // Generate guestbook markdown
            async function generateGuestbook(entries) {
              let content = '<!-- GUESTBOOK-LIST:START -->\n\n';
              content += '## ‚ú® Recent Guestbook Entries\n\n';
              
              if (entries.length === 0) {
                content += '> üìù Be the first to sign my guestbook!\n';
              } else {
                content += '| Guest | Date | Message |\n';
                content += '|:------|:-----|:--------|\n';
                
                for (const entry of entries.slice(0, 10)) {
                  const message = entry.message
                    .replace(/\|/g, '\\|')           // Escape table separators
                    .replace(/\[(.*?)\]/g, '\\[$1\\]') // Escape markdown links
                    .substring(0, 200);              // Limit length
                    
                  content += `| [![${entry.author}](${entry.avatar}&s=24)](${entry.url}) [@${entry.author}](https://github.com/${entry.author}) | ${entry.date} | ${message} |\n`;
                }
              }
              
              content += '\n### ‚úçÔ∏è Leave your message!\n\n';
              content += `[![Sign Guestbook](https://img.shields.io/badge/‚ú®_Sign_Guestbook-FFB6C1?style=for-the-badge&logoColor=white&labelColor=black)](https://github.com/${context.repo.owner}/${context.repo.repo}/issues/new?assignees=&labels=guestbook&template=guestbook-entry.yml&title=‚úç%EF%B8%8F+New+Guestbook+Entry)\n\n`;
              content += '<!-- GUESTBOOK-LIST:END -->';
              
              return content;
            }
            
            try {
              // Read README
              const readmePath = 'README.md';
              let readme = await fs.readFile(readmePath, 'utf8');
              
              // Get guestbook entries
              const entries = await getGuestbookEntries();
              
              // Generate new guestbook content
              const newContent = await generateGuestbook(entries);
              
              // Update README
              readme = readme.replace(
                /<!-- GUESTBOOK-LIST:START -->[\s\S]*<!-- GUESTBOOK-LIST:END -->/,
                newContent
              );
              
              // Save changes
              await fs.writeFile(readmePath, readme);
              
              // Log success
              console.log('‚úÖ Guestbook updated successfully!');
              
            } catch (error) {
              console.error('‚ùå Error updating guestbook:', error);
              core.setFailed(error.message);
            }
      
      - name: üöÄ Commit and Push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git add README.md
          git diff --staged --quiet || git commit -m '‚ú® Update guestbook'
          git push